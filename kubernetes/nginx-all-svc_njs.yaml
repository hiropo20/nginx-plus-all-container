apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  njs-default.conf: |
    js_import main from /etc/nginx/conf.d/njs-http_info.js;
    map $arg_msec $sleep_time_ms {
      default 1000;
      ~^\d+$  $arg_msec;
    }
    server {
        listen 8080;
        proxy_http_version 1.1;

        location / {
          #js_content main.hello;
          #js_content main.headers;
          #js_content main.args;
          js_content main.reqall;

        }
        location /wait {
          #js_content main.sleep2;
          js_content main.sleep;

        }

        location /api {
            api write=on;
            # directives limiting access to the API
        }

        location = /dashboard.html {
            root   /usr/share/nginx/html;
        }
    }
  njs-http_info.js: |
    export default { reqall, headers, args, hello, sleep, sleep2};

    // two types sleep functions
    function isNumber(value) {
      return !Number.isNaN(parseInt(value));
    }

    // 1 sleep using async / await / Promise
    function ms_sleep(milsec) {  return new Promise(function(resolve) {
      let ms ;
      if(!isNumber(milsec)){ ms = 1000; }
      if(isNumber(milsec)){ ms = parseInt(milsec); }
      setTimeout(function(){resolve(ms)}, ms)
    })}

    async function sleep(r) {
      let ms = await ms_sleep(r.variables.sleep_time_ms)
      r.return(200, "wait " + ms +"msec")

    }

    // 2 sleep using Promise
    function sleep2(r) {
      let ms ;
      if(!isNumber(r.variables.sleep_time_ms)){ ms = 1000; }
      if(isNumber(r.variables.sleep_time_ms)){ ms = parseInt(r.variables.sleep_time_ms); }
      let ms_sleep_promise =  new Promise(function(resolve) {
          setTimeout(function(){resolve()}, ms)
      })
      Promise.all([ms_sleep_promise]).then(function(){
        r.return(200, "wait " + ms +"msec")
      })
    }

    // hello
    function hello(r) {
      r.return(200, "Hello world!\n")
    }

    // reqall
    function reqall(r) {
      let str = {};
      str.headers = r.rawHeadersIn;
      str.status = r.status;
      str.httpversion = r.httpVersion;
      str.method = r.method;
      str.uri = r.uri;
      str.args = r.variables.args;
      str.reqbody = r.requestText;
      r.return(200, JSON.stringify(str));
      return;
    }
    function headers(r) {
      let str = r.rawHeadersIn;
      r.return(200, JSON.stringify(str));
      return;
    }
    function args(r) {
      let str = r.variables.args;
      r.return(200, JSON.stringify(str));
      return;
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-plus-all
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-plus-all
  template:
    metadata:
      labels:
        app: nginx-plus-all
    spec:
      containers:
      - name: nginx-plus-all
        image: registry.example.com/root/nic/nginx-plus-all:latest
        ports:
        - containerPort: 8080
        volumeMounts:
          - name: nginx-conf
            mountPath: /etc/nginx/conf.d/
            readOnly: true
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
            - key: njs-default.conf
              path: njs-default.conf
              mode: 0644
            - key: njs-http_info.js
              path: njs-http_info.js
              mode: 0644
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-plus-all-svc
  labels:
spec:
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: nginx-plus-all
