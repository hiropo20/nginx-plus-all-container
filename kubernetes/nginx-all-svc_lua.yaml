apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  lua-default.conf: |

    server {
        listen 8080;
        proxy_http_version 1.1;

        location / {
          # resply req header information
          content_by_lua_block {
            ngx.header.content_type = 'text/html'
            local h, err = ngx.req.get_headers()
            if err == "truncated" then
                ngx.say("get_header error.")
                ngx.exit(500)
                return
            end

            local res = "<html><head> <title>Request Header Responce</title> </head> <body>"
            for k, v in pairs(h) do
                res = res.."\""..k.."\":".."\""..v.."\"<br>"
            end
            res = res.."</body></html>"
            ngx.say(res)
          }
        }
        location /wait {
          content_by_lua_block {

            local args, err = ngx.req.get_uri_args()
   
            if err == "truncated" then
                -- one can choose to ignore or reject the current request here
            end
   
            local sec = 1

            function isnum(number)
              return number + 0
            end

            for key, val in pairs(args) do
                if key == "sec" then
                  if pcall(isnum, val) then
                    local sec = 1 
                  else
                    local sec = val
                  end
                end
            end
                --  if type(val+0) == 'number' then
                --    sec = val
                --  end
            
            ngx.say("sec:",sec)

            ngx.sleep(sec)
            ngx.say("wait ", sec, "sec")
          }

        }

        location /api {
            api write=on;
            # directives limiting access to the API
        }

        location = /dashboard.html {
            root   /usr/share/nginx/html;
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-plus-all
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-plus-all
  template:
    metadata:
      labels:
        app: nginx-plus-all
    spec:
      containers:
      - name: nginx-plus-all
        image: registry.example.com/root/nic/nginx-plus-all:latest
        ports:
        - containerPort: 8080
        volumeMounts:
          - name: nginx-conf
            mountPath: /etc/nginx/conf.d/
            readOnly: true
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
            - key: lua-default.conf
              path: lua-default.conf
              mode: 0644
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-plus-all-svc
  labels:
spec:
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: nginx-plus-all
